# Turma 2ESPG

# AUGUSTO DOUGLAS NOGUEIRA DE MENDON√áA - RM558371 
# GABRIEL VASQUEZ QUEIROZ DA SILVA ‚Äì RM557056 
# GUILHERME ARAUJO DE CARVALHO ‚Äì RM558926 
# GUSTAVO OLIVEIRA RIBEIRO ‚Äì RM559163 

# An√°lise de algoritmos e nota√ß√£o O-grande das fun√ß√µes feita no arquivo PDF

from datetime import datetime
from dataclasses import dataclass, field
from typing import Dict

@dataclass
class Exame:
    resultados: dict
    analise: list[str] = field(default_factory=list)  # An√°lise do exame (avalia√ß√µes)

@dataclass
class Usuario:
    nome: str
    idade: int
    genero: str
    exames: Dict[str, Dict[str, Exame]] = field(default_factory=dict)
    # exames: tipo -> data -> Exame

agenda = {}

def validar_cpf(cpf: str) -> bool:
    """Valida se o CPF tem 11 d√≠gitos num√©ricos."""
    return cpf.isdigit() and len(cpf) == 11

def validar_data(data: str) -> bool:
    """Valida se a data est√° no formato dd/mm/aaaa."""
    try:
        datetime.strptime(data, "%d/%m/%Y")
        return True
    except ValueError:
        return False

def input_float(msg: str) -> float:
    """For√ßa a entrada de um n√∫mero decimal v√°lido."""
    while True:
        try:
            return float(input(msg))
        except ValueError:
            print("‚ö†Ô∏è  Valor inv√°lido. Digite um n√∫mero.")

def input_int(msg: str) -> int:
    """For√ßa a entrada de um n√∫mero inteiro v√°lido."""
    while True:
        try:
            return int(input(msg))
        except ValueError:
            print("‚ö†Ô∏è  Valor inv√°lido. Digite um n√∫mero inteiro.")

def cadastrar_usuario():
    """Cadastra um novo paciente com CPF, nome, idade e g√™nero."""
    print("\nüë§ Cadastro de Novo Usu√°rio")
    cpf = input("CPF (somente n√∫meros): ").strip()
    if not validar_cpf(cpf):
        print("‚ùå CPF inv√°lido. Deve conter 11 d√≠gitos.")
        return
    if cpf in agenda:
        print("‚ö†Ô∏è  Usu√°rio j√° cadastrado.")
        return

    nome = input("Nome completo: ").strip()
    idade = input_int("Idade: ")
    genero = input("G√™nero (M/F): ").strip().upper()
    if genero not in {"M", "F"}:
        print("‚ö†Ô∏è  G√™nero inv√°lido.")
        return

    agenda[cpf] = Usuario(nome=nome, idade=idade, genero=genero)
    print("‚úÖ Usu√°rio cadastrado com sucesso!")

def cadastrar_exame():
    """Permite cadastrar um exame cl√≠nico para um paciente existente."""
    print("\nüß™ Cadastro de Novo Exame")
    cpf = input("CPF do paciente: ").strip()
    if cpf not in agenda:
        print("‚ùå Usu√°rio n√£o encontrado.")
        return

    print("\nüìã  Tipo de Exame:")
    tipos_exame = {
        "1": "Hemograma Completo",
        "2": "Colesterol",
        "3": "Glicemia",
        "4": "Horm√¥nios"
    }
    for key, value in tipos_exame.items():
        print(f"{key}Ô∏è‚É£  {value}")

    opcao = input("Escolha uma op√ß√£o: ")
    data = input("üóìÔ∏è Data do exame (dd/mm/aaaa): ")
    if not validar_data(data):
        print("‚ùå Data inv√°lida.")
        return

    genero = agenda[cpf].genero
    tipo = tipos_exame.get(opcao)
    if not tipo:
        print("‚ùå Op√ß√£o inv√°lida.")
        return

    resultados = coletar_resultados_exame(tipo, genero)
    if resultados is None:
        print("‚ùå Falha na coleta dos resultados do exame.")
        return

    # Gerar an√°lise do exame
    analise = analisar_exame(tipo, resultados, genero)

    # Inicializa estrutura se precisar
    if tipo not in agenda[cpf].exames:
        agenda[cpf].exames[tipo] = {}

    if data in agenda[cpf].exames[tipo]:
        print(f"‚ö†Ô∏è J√° existe um exame de {tipo} cadastrado na data {data}.")
        confirm = input("Deseja sobrescrever? (S/N): ").strip().upper()
        if confirm != "S":
            print("Opera√ß√£o cancelada, exame n√£o cadastrado.")
            return

    agenda[cpf].exames[tipo][data] = Exame(resultados=resultados, analise=analise)
    print(f"‚úÖ {tipo} cadastrado com sucesso na data {data}.")

def coletar_resultados_exame(tipo: str, genero: str) -> dict:
    """Coleta os resultados do exame com base no tipo e g√™nero."""
    if tipo == "Hemograma Completo":
        return {
            "Gl√≥bulos vermelhos": input_float("Gl√≥bulos vermelhos (milh√µes/¬µL): "),
            "Hemoglobina": input_float("Hemoglobina (g/dL): "),
            "Leuc√≥citos": input_int("Leuc√≥citos (c√©lulas/¬µL): "),
            "Plaquetas": input_int("Plaquetas (c√©lulas/¬µL): ")
        }
    elif tipo == "Colesterol":
        return {
            "Colesterol total": input_float("Colesterol total (mg/dL): "),
            "Colesterol HDL": input_float("Colesterol HDL (bom) (mg/dL): "),
            "Colesterol LDL": input_float("Colesterol LDL (ruim) (mg/dL): ")
        }
    elif tipo == "Glicemia":
        return {
            "Glicose": input_float("Glicose (mg/dL): ")
        }
    elif tipo == "Horm√¥nios":
        return {
            "TSH": input_float("TSH (mU/L): "),
            "T4 livre": input_float("T4 livre (ng/dL): ")
        }
    return None

def analisar_exame(tipo: str, resultados: dict, genero: str) -> list[str]:
    """Chama a fun√ß√£o de an√°lise espec√≠fica para o exame."""
    if tipo == "Hemograma Completo":
        return analisar_hemograma(resultados, genero)
    elif tipo == "Colesterol":
        return analisar_colesterol(resultados)
    elif tipo == "Glicemia":
        return analisar_glicemia(resultados)
    elif tipo == "Horm√¥nios":
        return analisar_hormonios(resultados)
    else:
        return []

def analisar_hemograma(exame: dict, genero: str) -> list[str]:
    resultado = []
    if genero == "M":
        resultado.append(analisar_faixa("Gl√≥bulos vermelhos", exame["Gl√≥bulos vermelhos"], 4.7, 6.1, "milh√µes/¬µL"))
        resultado.append(analisar_faixa("Hemoglobina", exame["Hemoglobina"], 13.8, 17.2, "g/dL"))
    else:
        resultado.append(analisar_faixa("Gl√≥bulos vermelhos", exame["Gl√≥bulos vermelhos"], 4.2, 5.4, "milh√µes/¬µL"))
        resultado.append(analisar_faixa("Hemoglobina", exame["Hemoglobina"], 12.1, 15.1, "g/dL"))
    resultado.append(analisar_faixa("Leuc√≥citos", exame["Leuc√≥citos"], 4500, 11000, "c√©lulas/¬µL"))
    resultado.append(analisar_faixa("Plaquetas", exame["Plaquetas"], 150000, 450000, "c√©lulas/¬µL"))
    return resultado

def analisar_colesterol(exame: dict) -> list[str]:
    resultado = []
    resultado.append(analisar_faixa("Colesterol total", exame["Colesterol total"], 0, 190, "mg/dL", tipo="m√°x"))
    resultado.append(analisar_faixa("Colesterol HDL", exame["Colesterol HDL"], 40, float('inf'), "mg/dL", tipo="m√≠n"))
    resultado.append(analisar_faixa("Colesterol LDL", exame["Colesterol LDL"], 0, 130, "mg/dL", tipo="m√°x"))
    return resultado

def analisar_glicemia(exame: dict) -> list[str]:
    valor = exame["Glicose"]
    if valor < 70:
        return ["Glicose baixa"]
    elif valor <= 99:
        return ["Glicose normal"]
    elif valor >= 126:
        return ["Glicose alta (poss√≠vel diabetes)"]
    else:
        return ["Glicose elevada (pr√©-diabetes)"]

def analisar_hormonios(exame: dict) -> list[str]:
    resultado = []
    resultado.append(analisar_faixa("TSH", exame["TSH"], 0.4, 4.0, "mU/L"))
    resultado.append(analisar_faixa("T4 livre", exame["T4 livre"], 0.8, 2.0, "ng/dL"))
    return resultado

def analisar_faixa(nome: str, valor: float, minimo: float, maximo: float, unidade: str, tipo="normal") -> str:
    """Avalia se um valor est√° dentro da faixa esperada."""
    if tipo == "normal" and (valor < minimo or valor > maximo):
        if valor < minimo:
            return f"{nome} abaixo do ideal ({valor} {unidade})"
        else:
            return f"{nome} acima do ideal ({valor} {unidade})"
    elif tipo == "m√°x" and valor > maximo:
        return f"{nome} elevado ({valor} {unidade})"
    elif tipo == "m√≠n" and valor < minimo:
        return f"{nome} baixo ({valor} {unidade})"
    return f"{nome} normal ({valor} {unidade})"

def visualizar_exames():
    """Mostra todos os exames de um paciente por CPF."""
    print("\nüìÇ Visualiza√ß√£o de Todos os Exames")
    cpf = input("CPF do paciente: ").strip()
    if cpf not in agenda:
        print("‚ùå Usu√°rio n√£o encontrado.")
        return

    exames = agenda[cpf].exames
    if not exames:
        print("‚ÑπÔ∏è Nenhum exame cadastrado.")
        return

    print(f"\nüßæ Exames de {agenda[cpf].nome}:\n")
    for tipo, exames_por_data in exames.items():
        for data, exame in exames_por_data.items():
            print(f"üìå {tipo} - {data}:")
            for chave, valor in exame.resultados.items():
                print(f"   ‚û§  {chave}: {valor}")
            print("   ‚û§  Resultado da an√°lise:")
            for anal in exame.analise:
                print(f"      ‚Ä¢ {anal}")
            print()

def visualizar_exame_especifico():
    """Permite selecionar um tipo de exame e data para visualizar o resultado espec√≠fico."""
    print("\nüîç Visualizar Exame Espec√≠fico")
    cpf = input("CPF do paciente: ").strip()
    if cpf not in agenda:
        print("‚ùå Usu√°rio n√£o encontrado.")
        return

    exames = agenda[cpf].exames
    if not exames:
        print("‚ÑπÔ∏è Esse paciente n√£o possui exames.")
        return

    print("\nüìã Exames dispon√≠veis:")
    tipos = list(exames.keys())
    for i, tipo in enumerate(tipos, 1):
        datas = list(exames[tipo].keys())
        datas_str = ", ".join(datas)
        print(f"{i}. {tipo} (datas: {datas_str})")

    try:
        opcao = int(input("Escolha o exame: "))
        tipo_escolhido = tipos[opcao - 1]
    except (ValueError, IndexError):
        print("‚ùå Op√ß√£o inv√°lida.")
        return

    datas_disponiveis = list(exames[tipo_escolhido].keys())
    if len(datas_disponiveis) > 1:
        print(f"\nDatas dispon√≠veis para {tipo_escolhido}:")
        for i, data in enumerate(datas_disponiveis, 1):
            print(f"{i}. {data}")
        try:
            opcao_data = int(input("Escolha a data do exame: "))
            data_escolhida = datas_disponiveis[opcao_data - 1]
        except (ValueError, IndexError):
            print("‚ùå Op√ß√£o inv√°lida.")
            return
    else:
        data_escolhida = datas_disponiveis[0]

    exame = exames[tipo_escolhido][data_escolhida]
    print(f"\nüìë Resultado do exame {tipo_escolhido} - {data_escolhida}:")
    for chave, valor in exame.resultados.items():
        print(f"   ‚û§  {chave}: {valor}")
    print("   ‚û§  Resultado da an√°lise:")
    for anal in exame.analise:
        print(f"      ‚Ä¢ {anal}")

def apagar_usuario():
    """Remove um usu√°rio e todos os seus exames com base no CPF."""
    print("\nüóëÔ∏è Apagar Usu√°rio")
    cpf = input("CPF do usu√°rio a ser removido: ").strip()
    if cpf in agenda:
        del agenda[cpf]
        print("‚úÖ Usu√°rio removido com sucesso.")
    else:
        print("‚ùå Usu√°rio n√£o encontrado.")

# Menu principal
def menu():
    """Exibe o menu principal e navega entre as funcionalidades."""
    while True:
        print("\nüìä === Sistema de Monitoramento de Exames Cl√≠nicos ===")
        print("1Ô∏è‚É£  Cadastrar novo usu√°rio")
        print("2Ô∏è‚É£  Cadastrar novo exame")
        print("3Ô∏è‚É£  Visualizar exames")
        print("4Ô∏è‚É£  Visualizar exame em espec√≠fico")
        print("5Ô∏è‚É£  Apagar usu√°rio")
        print("6Ô∏è‚É£  Fechar programa")

        opcao = input("Escolha uma op√ß√£o: ")
        match opcao:
            case "1":
                cadastrar_usuario()
            case "2":
                cadastrar_exame()
            case "3":
                visualizar_exames()
            case "4":
                visualizar_exame_especifico()
            case "5":
                apagar_usuario()
            case "6":
                print("üëã Encerrando o programa. At√© mais!")
                break
            case _:
                print("‚ùå Op√ß√£o inv√°lida.")

if __name__ == "__main__":
    menu()